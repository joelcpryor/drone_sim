/*

            This program is a dice roll simulator that is custom-made for my online game, DRONE.

            DRONE includes a feature whereby players battle against each other by rolling dice. Each player's score is calculated by adding together their strongest rolls. The number of rolls to be added together is context-dependent (it changes depending on how many 'units' the players have in play). Each round, the player with the lower score loses a die. The process repeats until one player has no dice remaining, at which point a winner is declared. 

            When you hit submit, the program will run as many simulations as you specify, then print a summary of the outcomes. This allows you to calculate the likelihood of winning a particular encounter based on how many units you have relative to your opponent.

        */

            function simulator(aInput, bInput, iterations, aBoost, bBoost) {

                // establish macro variables 
                var aWins = 0;
                var bWins = 0;
                var damageDone = 0; // on how many occasions did the winning player suffer damage in the process of winning? 
                var lowest, aShare, bShare;
    
                // each loop represents one combat simulation
                for (loop = 0; loop < iterations; loop++) {
    
                    // establish variables that reset at the beginning of each loop iteration
                    var exhausted = false;
                    var aDice = aInput;
                    var bDice = bInput;
    
                    // exhausted == true when all dice have been rolled
                    while (exhausted == false) {
    
                        // player score is generated by summing rolls; number of rolls to be summed must be the same for both players, therefore it's necessary to determine which player has fewer dice 
                        if (aDice <= bDice) {
                            lowest = aDice;
                        }
                        else { lowest = bDice; }
    
                        // dice rolls are pushed into an array
                        var aRolls = [];
                        var bRolls = [];
                        var aScore = 0;
                        var bScore = 0;
                        // DRONE has a feature where extra dice can be purchased; the total number of dice rolled includes these extras
                        var aTotal = aDice + aBoost;
                        var bTotal = bDice + bBoost;
    
                        // randomly generate number between 1 and 6 (aka roll the dice)
                        for (var i = 0; i < aTotal; i++) {
                            var rand = Math.floor(Math.random() * 6) + 1;
                            aRolls.push(rand);
                        }
                        for (var j = 0; j < bTotal; j++) {
                            var rand = Math.floor(Math.random() * 6) + 1;
                            bRolls.push(rand);
                        }
    
                        // sorts descending A 
                        for (var anchor = 0; anchor < aRolls.length; anchor++) {
                            for (var index = (anchor+1); index < aRolls.length; index++) {
                                if (aRolls[index] > aRolls[anchor]) {
                                    var holder = aRolls[anchor];
                                    aRolls[anchor] = aRolls[index];
                                    aRolls[index] = holder;
                                }
                            }
                        }
    
                        // sorts descending B
                        for (var anchor = 0; anchor < bRolls.length; anchor++) {
                            for (var index = (anchor+1); index < bRolls.length; index++) {
                                if (bRolls[index] > bRolls[anchor]) {
                                    var holder = bRolls[anchor];
                                    bRolls[anchor] = bRolls[index];
                                    bRolls[index] = holder;
                                }
                            }
                        }
    
                        // adds strongest rolls together
                        for (var i = 0; i < lowest; i++) {
                            aScore += aRolls[i];
                            bScore += bRolls[i];
                        }
    
                        console.log('PLAYER A ROLLS = ' + aRolls + ' // score = ' + aScore);
                        console.log('PLAYER B ROLLS = ' + bRolls + ' // score = ' + bScore);
                        
                        // player with lowest scores loses a dice
                        if (aScore > bScore) {
                            bDice--;
                            console.log('PLAYER B UNIT LOST');
                        }
                        else if (bScore > aScore) {
                            aDice--;
                            console.log('PLAYER A UNIT LOST');
                        }
    
                        // if one player has run out of dice, declare combat over and add a win to the winning player's tally
                        if (aDice == 0 || bDice == 0) {
                            exhausted = true;
    
                            // by checking whether bDice == bInput, we can determine whether Player B's win was a clean sweep or not (in other words, did they suffer damage in the process of winning?)
                            if (aDice == 0) {
                                bWins++;
                                if (bDice != bInput) {
                                    damageDone++;
                                }
                            }
                            else { 
                                aWins++;
                                if (aDice != aInput) {
                                    damageDone++;
                                }
                            }
                        }
                    }
                }
    
                // print the final count of wins/losses
                $('#aPrint').text('Player A wins: ' + aWins);
                $('#bPrint').text('Player B wins: ' + bWins);
                $('#damagePrint').text('Winner suffers damage in ' + damageDone + ' iterations.');
    
                // calculate wins as a percentage of combat instances
                aShare = Math.round((aWins / (aWins + bWins)) * 100);
                bShare = Math.round((bWins / (aWins + bWins)) * 100);
    
                $('#split').text(aShare + ' / ' + bShare);
            }
    
    
            // event handler that takes input, calls simulator function
            $('#submit').click(function() {
    
                var check = 0;
    
                var aInput = parseInt($('#aDiceInput').val());
                var bInput = parseInt($('#bDiceInput').val());
                var aBoost = parseInt($('#aBoostInput').val());
                var bBoost = parseInt($('#bBoostInput').val());
                var itInput = parseInt($('#itInput').val());
    
                localArray = [aInput, bInput, aBoost, bBoost, itInput];
    
                for (var element of localArray) {
                    if (Number.isInteger(element) == false) {
                        check++;
                        alert('Please ensure all input fields are full');
                    }
                }
    
                // need to make sure empty fields are not submitted -- this causes an infinite loop
                if (check == 0) {
                    simulator(aInput, bInput, itInput, aBoost, bBoost);
                }
            });